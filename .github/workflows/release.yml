name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      
    - name: Generate Version Info
      run: |
        $version = "${{ github.ref_name }}"
        if (-not $version) { $version = "v1.0.0" }
        
        $versionParts = $version.TrimStart('v').Split('.')
        $fileVersion = if ($versionParts.Count -ge 3) { 
          "($($versionParts[0]), $($versionParts[1]), $($versionParts[2]), 0)"
        } else {
          "(1, 0, 0, 0)"
        }
        
        $content = @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=$fileVersion,
            prodvers=$fileVersion,
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'Shahin ABDI'),
                StringStruct(u'FileDescription', u'Monitor Layout Manager'),
                StringStruct(u'FileVersion', u'$version'),
                StringStruct(u'InternalName', u'monitor_manager'),
                StringStruct(u'LegalCopyright', u'Copyright (c) 2024 Shahin ABDI'),
                StringStruct(u'OriginalFilename', u'MonitorManager.exe'),
                StringStruct(u'ProductName', u'Monitor Layout Manager'),
                StringStruct(u'ProductVersion', u'$version')])
              ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@
        $content | Out-File -FilePath file_version_info.txt -Encoding utf8
      shell: pwsh
      
    - name: Build Executable
      run: pyinstaller --clean monitor_app.spec
      
    - name: Create ZIP archive
      run: |
        Compress-Archive -Path "dist/MonitorManager.exe" -DestinationPath "MonitorManager.zip"
      shell: pwsh
      
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/MonitorManager.exe
          MonitorManager.zip
        name: Monitor Layout Manager ${{ github.ref_name }}
        body: |
          Monitor Layout Manager Release ${{ github.ref_name }}
          
          ### Installation
          1. Download MonitorManager.exe or MonitorManager.zip
          2. Run the executable as administrator
          
          ### Changes
          - Released version ${{ github.ref_name }}
          
          ### Note
          This application requires administrator privileges to modify display settings.
        draft: false
        prerelease: false